#!/usr/bin/env python
# Filename		: thumble
# Description		: Search through a given directory and create 100px wide resized copies of all images found, then format into a thumbnail gallery (HTML/CSS), with each thumbnail linked to its full-sized original.
# Author			: Dayo Adewunmi
# Email:			: jargonsummary@googlemail.com
# Date			: 20120624
# Version			: 0.7.5
# Licensing         : GPLv3
# Usage			: thumble <SOURCE> <DESTINATION>
# Notes			: 
# Python version	: 2.6.6
# TODO              : Script needs to find or copy the CSS file.
# TODO              : User should be able to choose thumbnail dimensions.
#==============================================================================

import os
import PIL
from PIL import Image
import re
import subprocess
from sys import argv

def isImage(filename):
    """ Match files that are image files"""
    image_re = re.compile('\.gif$|\.jpe?g$|\.png$|\.svg$|\.tiff?$', re.I)
    return image_re.search(filename)

def isThumble(thumbleFilename):
    """ Check if the first 8 characters of the target file is 'thumble_',
    then it's a thumbnail file that already exists, so don't overwrite."""
    if thumbleFilename[:8] == "thumble_":
        return True
    else:
        return False

def createThumb(fullsizeImg, galleryDir):
    """ Resize an image (somepic.jpg) using PIL (Python Imaging Library)\
            to a width of 300 pixels and a height proportional to the new width. 
        It does this by determining what percentage 300 pixels is of the \
                original width (img.size[0]) and then multiplying the original \
                height (img.size[1]) by that percentage. Change "basewidth" to \
                any other number to change the default width of your images."""
    basewidth = 100
    img = PIL.Image.open(fullsizeImg)
    widthPercent = (basewidth/float(img.size[0]))
    height = int((float(img.size[1])*float(widthPercent)))

    print "Creating thumbnail for %s" %(fullsizeImg)

    img = img.resize((basewidth, height), PIL.Image.ANTIALIAS)
    abspathToThumbname = galleryDir + '/thumble_' + os.path.basename(fullsizeImg)
    img.save(abspathToThumbname)

    return abspathToThumbname

def addToGalleryFile(galleryFile, filename, thumbname, divtype):
    """ Create hyperlinks with thumbnails."""
    thumb = '<div class="thumb"><a href="%s"><img src="%s" /></a>%s' %(filename, thumbname, divtype)

    print "Adding thumbnail %s to gallery." %(thumbname)
    
    galleryFile.write(thumb)

def copyCSS(thumbDirname):
    """ Copy CSS file to the thumbnail gallery directory."""
    cssDirname = thumbDirname + '/css'

    print "Creating %s" %(cssDirname)
    os.makedirs(cssDirname)

    cssFile = '/usr/local/bin/thumble/css/thumbstyles.css'

    print "Copying %s" %(cssFile)
    subprocess.call(['cp', cssFile, cssDirname])

def closeGalleryFile(galleryFile):
    """ Create closing tags at the end of the gallery's html file."""
    endDivs = '</div>'
    endBodyTag = '</div></body></html>'

    footer = '<div id="footer">Thumbnail gallery generated by Thumble. Coded by Dayo Adewunmi. Powered by <a href="http://python.org">Python</a>. GPLv3.</div>'
    bottom = endDivs + footer + endBodyTag

    galleryFile.write(bottom)
    galleryFile.close()

def findimages(imagesSourceDir, galleryDir):
    """ Create thumbnails from images."""
    linebreak = 1

    newrow = '</div></div><div class="newrow">'
    samerow = '</div>'

    galleryFile = openGalleryFile(galleryDir)

    print "Finding images.."

    # Go through the filenames in the source directory and
    # find all the images.
    for dirname, subdirname, filenames in os.walk(imagesSourceDir):
        for filename in filenames:
            # Find all images
            if isImage(filename):
                # First check if a corresponding thumbnail file already exists.
                # If it does, then return an error and skip thumbnail creation.
                if isThumble(filename):
                    print "Error: Thumbnail %s already exists. Skipping." %(filename)
                # Else go ahead and create a thumbnail from the source image.
                else:
                    # Get absolute path to the fullsize image file.
                    imageAbspath = imagesSourceDir + '/%s' %(filename)
                    if linebreak % 5 == 0:
                        addToGalleryFile(galleryFile, imageAbspath, createThumb(imageAbspath, galleryDir), newrow)
                    else:
                        addToGalleryFile(galleryFile, imageAbspath, createThumb(imageAbspath, galleryDir), samerow)

                    linebreak = linebreak + 1

    closeGalleryFile(galleryFile)
    copyCSS(galleryDir)

def openGalleryFile(destinationDir):
    indexFile = destinationDir + "/index.html"
    writeFile = open(indexFile, "w")
    titleTag = '<html><head><title>Thumble - Image gallery</title>'
    includeCSS = '<link href="css/thumbstyles.css" rel="stylesheet" type="text/css" /></head>'
    header = titleTag + includeCSS

    startBodyTag = '<body>'
    howto = '<strong><h4></h4> To view full-size: click on image. To save a picture: right-click on image and click "Save Link As"</strong>'
    startDivs = '<div id="container"><div class="newrow">'


    top = header + startBodyTag + howto + startDivs

    writeFile.write(top)

    return writeFile

def main():
    # Get source and destination of images
    if len(argv) != 3:
        print "Usage: python thumble <SOURCE DIR> <DESTINATION DIR>"
    else:
        # Convert source and destination directories to
        # absolute paths.
        abspathSourceDir = os.path.abspath(os.path.expanduser(argv[1]))
        abspathDestinationDir = os.path.abspath(os.path.expanduser(argv[2]))
        # Check if paths are correct
        if os.path.exists(abspathSourceDir):
            if os.path.exists(abspathDestinationDir):
                    findimages(abspathSourceDir, abspathDestinationDir)
            else:
                    print "ERROR: Destination directory does not exist."
        else:
            print "ERROR: Source directory does not exist."
            
    
if __name__ == "__main__":
    main()
