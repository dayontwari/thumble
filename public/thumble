#!/usr/bin/env python
# Filename		: thumble
# Description		: Search through a given directory and create thumbnails of 
#                     all images found. Default width of a thumbnail is 100px.
#                     Custom width can be passed as command line parameter. 
#                     Thumble then creates the thumbnails and a thumbnail gallery 
#                     using HTML/CSS, with each thumbnail hyperlinked to its 
#                     fullsized original.
# Author			: Dayo Adewunmi
# Email:			: jargonsummary@googlemail.com
# Date			: 20120624
# Version			: 0.7.6.1
# Licensing         : GPLv3
# Usage			: thumble <SOURCE> <DESTINATION> [-w <WIDTH>]
# Notes			: 
# Python version	: 2.6.6
# TODO              : Thumble should create destination directories, if they
#                     don't already exist.
# TODO              : Improve linebreaking.
#==============================================================================

import optparse
import os
import PIL
from PIL import Image
import re
import subprocess
from sys import argv

def isImage(filename):
    """ Match files that are image files"""
    image_re = re.compile('\.gif$|\.jpe?g$|\.png$|\.svg$|\.tiff?$', re.I)
    return image_re.search(filename)

def isThumble(thumbleFilename):
    """ If the first 8 characters of the target file is 'thumble_',
    then it's a thumbnail file that already exists, so don't overwrite."""
    if thumbleFilename[:8] == "thumble_":
        return True
    else:
        return False

def createThumbnail(fullsizeImg, galleryDir, thumbwidth):
    """ Resize an image (somepic.jpg) using PIL (Python Imaging Library)\
            to a width provided by user input, or default width of 100 px,\
            and a height proportional to the new width. 
        It does this by determining what percentage the thumbnail width pixels\
                are of the fullsize width (img.size[0]) and then multiplying \
                the fullsize height (img.size[1]) by that percentage.""" 
    basewidth = thumbwidth
    img = PIL.Image.open(fullsizeImg)
    # Determine what percentage the thumbnail width is of the fullsize width.
    widthPercent = (basewidth/float(img.size[0]))
    # And then use that to calculate the thumbnail's proportional height.
    height = int((float(img.size[1])*float(widthPercent)))

    print "Creating thumbnail for %s" %(fullsizeImg)

    # Create the thumbnails using the new width and height values.
    img = img.resize((basewidth, height), PIL.Image.ANTIALIAS)
    abspathToThumbname = galleryDir + '/thumble_' + os.path.basename(fullsizeImg)
    img.save(abspathToThumbname)

    return abspathToThumbname

def addToGalleryFile(galleryFile, filename, thumbname, divtype):
    """ Create hyperlinks with thumbnails in the thumbnail gallery file."""
    thumb = '<div class="thumb"><a href="%s"><img src="%s" /></a>%s' %(filename, thumbname, divtype)

    print "Adding thumbnail %s to gallery." %(thumbname)
    
    galleryFile.write(thumb)

def copyCSS(thumbDirname):
    """ Copy CSS file to the thumbnail gallery directory."""
    cssDirname = thumbDirname + '/css'

    print "Creating %s" %(cssDirname)
    os.makedirs(cssDirname)

    cssFile = '/usr/local/bin/thumble/css/thumbstyles.css'

    print "Copying %s" %(cssFile)
    subprocess.call(['cp', cssFile, cssDirname])

def closeGalleryFile(galleryFile):
    """ Create closing tags at the end of the gallery's html file."""
    endDivs = '</div>'
    endBodyTag = '</div></body></html>'

    footer = '<div id="footer">Thumbnail gallery generated by Thumble. Coded by Dayo Adewunmi. Powered by <a href="http://python.org">Python</a>. GPLv3.</div>'
    bottom = endDivs + footer + endBodyTag

    galleryFile.write(bottom)
    galleryFile.close()

def findImages(imagesSourceDir, galleryDir, thumbwidth):
    """ Find all the images in the source directory, when found pass\
            them on for thumbnail creation."""
    linebreak = 1

    newrow = '</div></div><div class="newrow">'
    samerow = '</div>'

    galleryFile = openGalleryFile(galleryDir)

    print "Finding images.."

    # Go through the filenames in the source directory and
    # find all the images.
    for dirname, subdirname, filenames in os.walk(imagesSourceDir):
        for filename in filenames:
            # Find all images
            if isImage(filename):
                # First check if a corresponding thumbnail file already exists.
                # If it does, then return an error and skip thumbnail creation.
                if isThumble(filename):
                    print "Error: Thumbnail %s already exists. Skipping." %(filename)
                else:
                    # Get absolute path to the fullsize image file. And pass this
                    # on for thumbnail creation.
                    imageAbspath = imagesSourceDir + '/%s' %(filename)
                    # Writing 5 thumbnails per line in the gallery
                    if linebreak % 5 == 0:
                        addToGalleryFile(galleryFile, imageAbspath, createThumbnail(imageAbspath, galleryDir, thumbwidth), newrow)
                    else:
                        addToGalleryFile(galleryFile, imageAbspath, createThumbnail(imageAbspath, galleryDir, thumbwidth), samerow)

                    linebreak = linebreak + 1

    closeGalleryFile(galleryFile)
    copyCSS(galleryDir)

def openGalleryFile(destinationDir):
    """ Open and prepopulate the thumbnail gallery's HTML file\
            with the necessary HTML/CSS tags."""
    indexFile = destinationDir + "/index.html"
    writeFile = open(indexFile, "w")
    titleTag = '<html><head><title>Thumble - Image gallery</title>'
    includeCSS = '<link href="css/thumbstyles.css" rel="stylesheet" type="text/css" /></head>'
    header = titleTag + includeCSS

    startBodyTag = '<body>'
    howto = '<strong><h4></h4> To view full-size: click on image. To save a picture: right-click on image and click "Save Link As"</strong>'
    startDivs = '<div id="container"><div class="newrow">'

    top = header + startBodyTag + howto + startDivs

    writeFile.write(top)

    return writeFile

def main():
    # Add command line parameters: source dir, destination dir, thumbnail width.
    usage = "Usage: %prog [options] arg"
    parser = optparse.OptionParser()
    parser.add_option("-s", "--source", dest="sourcedir", action="store", default=".")
    parser.add_option("-d", "--destination", dest="destinationdir", action="store", default="/tmp")
    parser.add_option("-w", "--width", dest="width", action="store", default="100", type=int)

    options, args = parser.parse_args()

    # Expand source and destination paths (if necessary).
    abspathSourceDir = os.path.abspath(os.path.expanduser(options.sourcedir))
    abspathDestinationDir = os.path.abspath(os.path.expanduser(options.destinationdir))

    thumbwidth = options.width

    # Check if paths are exist.
    if os.path.exists(abspathSourceDir):
        if os.path.exists(abspathDestinationDir):
            findImages(abspathSourceDir, abspathDestinationDir, thumbwidth)
        else:
            print "ERROR: Destination directory does not exist."
    else:
        print "ERROR: Source directory does not exist."

if __name__ == "__main__":
    main()
